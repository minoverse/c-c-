전역변수(global variable) and global function we should not use it as possible as we can


객체 지향 프로그래밍에서 캡슐화는 객체가 구현된 방식의 세부 정보를 사용자로부터 숨기면서 유지하는 방식이다. 대신 사용자는 객체의 공개 인터페이스를 통해 접근할 수 있다. 

객체(인스턴스)
  캡슐화(영어: encapsulation)는 객체 지향 프로그래밍에서 다음 2가지 측면이 있다: 객체의 속성(data fields)과 행위(메서드, methods)를 하나로 묶고, 실제 구현 내용 일부를 외부에 감추어 은닉한다. -위키백과-


C++에서는 접근 지정자를 통해 캡슐화를 구현한다. 일반적으로 클래스의 멤버 변수(구현 세부 정보)는 private로 설정하고, 멤버 함수(공개 인터페이스)는 public으로 설정한다. 클래스의 사용자가 인터페이스를 사용하도록 요구하는 것은 멤버 변수에 대한 직접 접근을 제공하는 것보다 부담스러울 수 있지만, 클래스 재사용성과 유지보수 측면에서 더 많은 이점이 있다.

 struct and a class is the default access level. In a struct, members are public by default, while in a class, members are private by default.

this is unvisable parameter

this pointer
this 포인터는 모든 멤버 함수에 추가되는 숨겨진 매개 변수다. 

호출된 객체의 주소를 가리키는 상수 포인터다.

상수 포인터 자료형이므로 포인터 자체가 다른 것을 가리키도록 할 수는 없다.

멤버 변수 이름과 멤버 함수의 매개 변수 이름이 같으면 명시적으로 this를 참조해서 구분할 수 있다. (ex: this->data = data;)

*this를 반환하는 방식으로 함수 체이닝 기법을 만들 수 있다.
ex
#include <iostream>

class Calc
{
private:
    int m_Value = 0;

public:
    // Member function to add a value and return *this for chaining
    Calc& Add(int value) { m_Value += value; return *this; }

    // Member function to subtract a value and return *this for chaining
    Calc& Sub(int value) { m_Value -= value; return *this; }

    // Member function to multiply by a value and return *this for chaining
    Calc& Mul(int value) { m_Value *= value; return *this; }

    // Member function to retrieve the current value
    int GetValue() { return m_Value; }
};

// same as
int main()
{
    // Create an instance of the Calc class
    Calc calc;

    // Chained method calls using the returned *this
    calc.Add(5).Sub(3).Mul(4);

    // Retrieve the final result and print it
    std::cout << calc.GetValue() << std::endl;  // Output: 8

    return 0;
}

디폴트 매개 변수 (default parameter)

디폴트 매개 변수(default parameter)는 기본값이 제공된 함수 매개 변수다. 사용자가 이 매개 변수의 값을 제공하지 않으면 기본값(default value)이 사용된다. 반대로 매개 변수의 값을 제공하면 사용자 제공 값이 기본값 대신 사용된다.

void printValues(int x, int y=10)
{
    std::cout << "x: " << x << '\n';
    std::cout << "y: " << y << '\n';
}

int main()
{
    printValues(1);    // y will use default parameter of 10
    printValues(3, 4); // y will use user-supplied value 4
}
/*
x: 1
y: 10
x: 3
y: 4
*/

모든 default parameter는 오른쪽부터 지정해야 한다. 그래서 다음은 허용되지 않는다.

void printValue(int x=10, int y); // not allowed

Default parameters can only be declared once

선언된 후에는 디폴트 매개 변수(default parameter)를 다시 선언할 수 없다. 즉, 전방 선언과 함수 정의가 있는 함수의 경우, default parameter는 전방 선언이나 함수 정의 둘 중 하나에서만 선언할 수 있다.

void printValues(int x, int y=10);

void printValues(int x, int y=10) // error: redefinition of default parameter
{
    std::cout << "x: " << x << '\n';
    std::cout << "y: " << y << '\n';

참조자(Reference)
참조자란 대상에게 또 다른 이름을 붙여주는 것을 말합니다. 별명 또는 별칭을 붙여준다고도 하죠
하나의 메모리 공간에 이름이 2개 생기게 되고 이 둘의 주소 값이 같다라는 의미
참조자를 선언하는 방법은 선언 시 & 연산자를 붙여야 하며 선언과 동시에 참조할 대상을 지정하여 초기화해야 합니다.
한 번 누군가를 참조했으면 참조의 대상을 바꿀 수 없습니다. 
const int num = 10;    // 상수
int& ref1 = num;       // Compile Error: 비-상수 참조자로 상수 참조 불가
const int& ref2 = num; // Pass
const int& ref3 = 100; // Pass
비-상수 참조자(non-const reference)는 상수를 참조할 수 없지만 const를 사용하면 가능합니다.
또한 const int& ref3 = 100;처럼 리터럴 상수도 참조할 수 있습니다. 여기서 100이라는 리터럴 상수는 임시적인 값으로써 메모리에 이름도 없이 존재 했다가 다음 행에서 소멸하는 것을 말합니다. 때문에 non-const 참조자는 상수를 참조할 수 없습니다. 메모리에서 이름도 없이 바로 사라지는 임시 값이니까요.
하지만 위와 같이 상수를 const 참조자로 참조하면 '임시 변수'라는 것이 생기면서 참조가 가능
일반 참조자는 NULL 참조가 불가능
참조자는 포인터와 달리 주소값 연산을 이용하여 해당 변수의 메모리가 아닌 다른 메모리에 접근할 수가 없기 때문에 안전하다
함수 호출자 입장에서는 이 함수가 매개변수로 일반 변수를 받는지, 참조자를 받는지 알 수 없습니다. 이 경우 C++ 언어적 차원에서 근본적인 해결 방안은 현재까지 없습니다.
따라서 함수 작성자는 함수의 매개변수가 참조자이고 이 매개변수가 변형될 일이 없다면 매개변수를 const 참조자로 작성해야 하며, 함수 호출자 또한 함수가 매개변수를 어떤 데이터형으로 받는지 확인해야 합니다.
해제된 메모리를 참조하는 참조자를 댕글링 레퍼런스(Dangling Reference)라고 합니다. 함수에서 참조자를 반환할 때는 지역 변수를 반환하여 댕글링 레퍼런스가 발생하지 않았는지 각별히 주의하여야 합니다.


 매개변수가 다르며 이름이 동일한 함수를 함수 오버로딩이라고 합니다.

생성자 and 소멸자
class Rect {    .....};
 Rect rect1; void func() {    Rect rect2;    Rect rect3;    .....} 
int main() {    .....    func();    .....}
 위 예제와 같이 main()함수에서 func() 함수가 호출될 때 rect2, rect3 의 순으로 인스턴스가 생성되며 생성자도 같은 순서로 호출된다. 하지만 func() 함수가!!! 종료될 때는 그 역순으로 소멸되며!!! 소멸자도 역순으로 호출된다.  전체적인 생성자와 소멸자의 호출순서를 좀 더 자세히 기술하면 다음과 같다.프로그램 시작   
 rect1 객체 생성 (생성자 호출)    
main()함수 실행        .....       
 func()함수 실행       
 rect2 객체 생성 (생성자 호출)       
 rect3 객체 생성 (생성자 호출)        .....      
  rect3 객체 소멸 (소멸자 호출)      
  rect2 객체 소멸 (소멸자 호출)        
func()함수 종료        .....   
 main함수 종료  
  rect1 객체 소멸
 (소멸자 호출)프로그램 종료


위임 생성자 (delegate constructor)
정리다시

상수형 메서드
상수형 메서드는 뒤에 const를 붙여줘야한다!
또한 Get함수는 const로 설정해주는 것이 좋다!
상수형 메서드는 멤버메서드, 즉 클래스 안에서만 가능하다. 전역범위에서는 안된다!

동적 할당 ( Dynamic Allocation )
new 연산자 와 delete연산자를 사용
new를 했는데 만약 메모리에 공간이 없다면 NULL을 반환하게 된다.
때문에 NULL 체크를 항상 해주어야 한다.
new 키워드를 이용해서 동적 할당
1. 변수는 포인터로 선언한다.
2. new "객체의 타입"(초기화할 값);
3. 이때 초기화활 값을 넣지 않으면 기본 생성자가 호출된다.

연산자 오버로딩
 ishould understand and organize it!!!!
정리다시


void 포인터
#include <stdio.h>
 
int main() {
    int a = 10;
    void *b = &a;
    printf("%d\n", *(int*)b);

#include <stdio.h>
 
int main() {
    char a= 'c';
    void *b = &a;
    printf("%c\n", *(char*)b);
이렇게 void포인터는 만능입니다. 어떤 자료형이건 바로 참조할 수있죠. 알맞은 자료형으로만 변경한다면 말이죠.



우리는 void포인터를 동적할당할때 유용하게 사용합니다. 동적할당에 사용하는 malloc과 같은 함수들이 void*로 반환하기 때문입니다.

malloc은 특정한 size의 크기로 메모리를 할당하고나서 우리들에게 알맞게 변환해서 써라 라는 의미로 void*를 내뱉게 됩니다.

어차피 나중에 배울 malloc함수의 원형 한번 볼까요?

void *malloc(size_t size)


Deep copy vs shallow copy  and 복사 생성자(Copy Constructor)
복사 생성자란 다른 객체로부터 값을 복사해서 새로운 객체를 초기화하는데 사용되는 생성자이다. 복사 생성자를 정의하지 않으면 컴파일러가 자동으로 만들어주며 기본적으로 자신과 동일한 타입의 객체에 대한 레퍼런스(&)를 인자로 받는 생성자이다. 
